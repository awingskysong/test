using System; 
using System.Text; 
using System.Data;
using System.Data.SqlClient;
using System.Data.Common;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration; 
using System.Xml; 
using System.Xml.Serialization;
using SubSonic; 
using SubSonic.Utilities;
// <auto-generated />
namespace ZJDBProvider.DAL
{
	/// <summary>
	/// Strongly-typed collection for the TZjcompanyseed class.
	/// </summary>
    [Serializable]
	public partial class TZjcompanyseedCollection : ActiveList<TZjcompanyseed, TZjcompanyseedCollection>
	{	   
		public TZjcompanyseedCollection() {}
        
        /// <summary>
		/// Filters an existing collection based on the set criteria. This is an in-memory filter
		/// Thanks to developingchris for this!
        /// </summary>
        /// <returns>TZjcompanyseedCollection</returns>
		public TZjcompanyseedCollection Filter()
        {
            for (int i = this.Count - 1; i > -1; i--)
            {
                TZjcompanyseed o = this[i];
                foreach (SubSonic.Where w in this.wheres)
                {
                    bool remove = false;
                    System.Reflection.PropertyInfo pi = o.GetType().GetProperty(w.ColumnName);
                    if (pi.CanRead)
                    {
                        object val = pi.GetValue(o, null);
                        switch (w.Comparison)
                        {
                            case SubSonic.Comparison.Equals:
                                if (!val.Equals(w.ParameterValue))
                                {
                                    remove = true;
                                }
                                break;
                        }
                    }
                    if (remove)
                    {
                        this.Remove(o);
                        break;
                    }
                }
            }
            return this;
        }
		
		
	}
	/// <summary>
	/// This is an ActiveRecord class which wraps the t_zjcompanyseed table.
	/// </summary>
	[Serializable]
	public partial class TZjcompanyseed : ActiveRecord<TZjcompanyseed>, IActiveRecord
	{
		#region .ctors and Default Settings
		
		public TZjcompanyseed()
		{
		  SetSQLProps();
		  InitSetDefaults();
		  MarkNew();
		}
		
		private void InitSetDefaults() { SetDefaults(); }
		
		public TZjcompanyseed(bool useDatabaseDefaults)
		{
			SetSQLProps();
			if(useDatabaseDefaults)
				ForceDefaults();
			MarkNew();
		}
        
		public TZjcompanyseed(object keyID)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByKey(keyID);
		}
		 
		public TZjcompanyseed(string columnName, object columnValue)
		{
			SetSQLProps();
			InitSetDefaults();
			LoadByParam(columnName,columnValue);
		}
		
		protected static void SetSQLProps() { GetTableSchema(); }
		
		#endregion
		
		#region Schema and Query Accessor	
		public static Query CreateQuery() { return new Query(Schema); }
		public static TableSchema.Table Schema
		{
			get
			{
				if (BaseSchema == null)
					SetSQLProps();
				return BaseSchema;
			}
		}
		
		private static void GetTableSchema() 
		{
			if(!IsSchemaInitialized)
			{
				//Schema declaration
				TableSchema.Table schema = new TableSchema.Table("t_zjcompanyseed", TableType.Table, DataService.GetInstance("ZJDBProvider"));
				schema.Columns = new TableSchema.TableColumnCollection();
				schema.SchemaName = @"";
				//columns
				
				TableSchema.TableColumn colvarId = new TableSchema.TableColumn(schema);
				colvarId.ColumnName = "id";
				colvarId.DataType = DbType.Int32;
				colvarId.MaxLength = 11;
				colvarId.AutoIncrement = true;
				colvarId.IsNullable = false;
				colvarId.IsPrimaryKey = true;
				colvarId.IsForeignKey = false;
				colvarId.IsReadOnly = false;
				colvarId.DefaultSetting = @"";
				colvarId.ForeignKeyTableName = "";
				schema.Columns.Add(colvarId);
				
				TableSchema.TableColumn colvarCompanyName = new TableSchema.TableColumn(schema);
				colvarCompanyName.ColumnName = "companyName";
				colvarCompanyName.DataType = DbType.String;
				colvarCompanyName.MaxLength = 255;
				colvarCompanyName.AutoIncrement = false;
				colvarCompanyName.IsNullable = false;
				colvarCompanyName.IsPrimaryKey = false;
				colvarCompanyName.IsForeignKey = false;
				colvarCompanyName.IsReadOnly = false;
				colvarCompanyName.DefaultSetting = @"";
				colvarCompanyName.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyName);
				
				TableSchema.TableColumn colvarCompanyNo = new TableSchema.TableColumn(schema);
				colvarCompanyNo.ColumnName = "companyNo";
				colvarCompanyNo.DataType = DbType.String;
				colvarCompanyNo.MaxLength = 100;
				colvarCompanyNo.AutoIncrement = false;
				colvarCompanyNo.IsNullable = false;
				colvarCompanyNo.IsPrimaryKey = false;
				colvarCompanyNo.IsForeignKey = false;
				colvarCompanyNo.IsReadOnly = false;
				colvarCompanyNo.DefaultSetting = @"";
				colvarCompanyNo.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCompanyNo);
				
				TableSchema.TableColumn colvarProvince = new TableSchema.TableColumn(schema);
				colvarProvince.ColumnName = "province";
				colvarProvince.DataType = DbType.String;
				colvarProvince.MaxLength = 50;
				colvarProvince.AutoIncrement = false;
				colvarProvince.IsNullable = true;
				colvarProvince.IsPrimaryKey = false;
				colvarProvince.IsForeignKey = false;
				colvarProvince.IsReadOnly = false;
				colvarProvince.DefaultSetting = @"";
				colvarProvince.ForeignKeyTableName = "";
				schema.Columns.Add(colvarProvince);
				
				TableSchema.TableColumn colvarCity = new TableSchema.TableColumn(schema);
				colvarCity.ColumnName = "city";
				colvarCity.DataType = DbType.String;
				colvarCity.MaxLength = 50;
				colvarCity.AutoIncrement = false;
				colvarCity.IsNullable = true;
				colvarCity.IsPrimaryKey = false;
				colvarCity.IsForeignKey = false;
				colvarCity.IsReadOnly = false;
				colvarCity.DefaultSetting = @"";
				colvarCity.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCity);
				
				TableSchema.TableColumn colvarCorporate = new TableSchema.TableColumn(schema);
				colvarCorporate.ColumnName = "corporate";
				colvarCorporate.DataType = DbType.String;
				colvarCorporate.MaxLength = 50;
				colvarCorporate.AutoIncrement = false;
				colvarCorporate.IsNullable = true;
				colvarCorporate.IsPrimaryKey = false;
				colvarCorporate.IsForeignKey = false;
				colvarCorporate.IsReadOnly = false;
				colvarCorporate.DefaultSetting = @"";
				colvarCorporate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarCorporate);
				
				TableSchema.TableColumn colvarRegCapital = new TableSchema.TableColumn(schema);
				colvarRegCapital.ColumnName = "regCapital";
				colvarRegCapital.DataType = DbType.String;
				colvarRegCapital.MaxLength = 50;
				colvarRegCapital.AutoIncrement = false;
				colvarRegCapital.IsNullable = true;
				colvarRegCapital.IsPrimaryKey = false;
				colvarRegCapital.IsForeignKey = false;
				colvarRegCapital.IsReadOnly = false;
				colvarRegCapital.DefaultSetting = @"";
				colvarRegCapital.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegCapital);
				
				TableSchema.TableColumn colvarRegDate = new TableSchema.TableColumn(schema);
				colvarRegDate.ColumnName = "regDate";
				colvarRegDate.DataType = DbType.DateTime;
				colvarRegDate.MaxLength = 0;
				colvarRegDate.AutoIncrement = false;
				colvarRegDate.IsNullable = true;
				colvarRegDate.IsPrimaryKey = false;
				colvarRegDate.IsForeignKey = false;
				colvarRegDate.IsReadOnly = false;
				colvarRegDate.DefaultSetting = @"";
				colvarRegDate.ForeignKeyTableName = "";
				schema.Columns.Add(colvarRegDate);
				
				TableSchema.TableColumn colvarBusinessScope = new TableSchema.TableColumn(schema);
				colvarBusinessScope.ColumnName = "businessScope";
				colvarBusinessScope.DataType = DbType.String;
				colvarBusinessScope.MaxLength = 1000;
				colvarBusinessScope.AutoIncrement = false;
				colvarBusinessScope.IsNullable = true;
				colvarBusinessScope.IsPrimaryKey = false;
				colvarBusinessScope.IsForeignKey = false;
				colvarBusinessScope.IsReadOnly = false;
				colvarBusinessScope.DefaultSetting = @"";
				colvarBusinessScope.ForeignKeyTableName = "";
				schema.Columns.Add(colvarBusinessScope);
				
				TableSchema.TableColumn colvarPhone = new TableSchema.TableColumn(schema);
				colvarPhone.ColumnName = "phone";
				colvarPhone.DataType = DbType.String;
				colvarPhone.MaxLength = 50;
				colvarPhone.AutoIncrement = false;
				colvarPhone.IsNullable = true;
				colvarPhone.IsPrimaryKey = false;
				colvarPhone.IsForeignKey = false;
				colvarPhone.IsReadOnly = false;
				colvarPhone.DefaultSetting = @"";
				colvarPhone.ForeignKeyTableName = "";
				schema.Columns.Add(colvarPhone);
				
				TableSchema.TableColumn colvarAddress = new TableSchema.TableColumn(schema);
				colvarAddress.ColumnName = "address";
				colvarAddress.DataType = DbType.String;
				colvarAddress.MaxLength = 255;
				colvarAddress.AutoIncrement = false;
				colvarAddress.IsNullable = true;
				colvarAddress.IsPrimaryKey = false;
				colvarAddress.IsForeignKey = false;
				colvarAddress.IsReadOnly = false;
				colvarAddress.DefaultSetting = @"";
				colvarAddress.ForeignKeyTableName = "";
				schema.Columns.Add(colvarAddress);
				
				TableSchema.TableColumn colvarEmail = new TableSchema.TableColumn(schema);
				colvarEmail.ColumnName = "email";
				colvarEmail.DataType = DbType.String;
				colvarEmail.MaxLength = 50;
				colvarEmail.AutoIncrement = false;
				colvarEmail.IsNullable = true;
				colvarEmail.IsPrimaryKey = false;
				colvarEmail.IsForeignKey = false;
				colvarEmail.IsReadOnly = false;
				colvarEmail.DefaultSetting = @"";
				colvarEmail.ForeignKeyTableName = "";
				schema.Columns.Add(colvarEmail);
				
				TableSchema.TableColumn colvarWebsite = new TableSchema.TableColumn(schema);
				colvarWebsite.ColumnName = "website";
				colvarWebsite.DataType = DbType.String;
				colvarWebsite.MaxLength = 255;
				colvarWebsite.AutoIncrement = false;
				colvarWebsite.IsNullable = true;
				colvarWebsite.IsPrimaryKey = false;
				colvarWebsite.IsForeignKey = false;
				colvarWebsite.IsReadOnly = false;
				colvarWebsite.DefaultSetting = @"";
				colvarWebsite.ForeignKeyTableName = "";
				schema.Columns.Add(colvarWebsite);
				
				TableSchema.TableColumn colvarUpdateTime = new TableSchema.TableColumn(schema);
				colvarUpdateTime.ColumnName = "updateTime";
				colvarUpdateTime.DataType = DbType.DateTime;
				colvarUpdateTime.MaxLength = 0;
				colvarUpdateTime.AutoIncrement = false;
				colvarUpdateTime.IsNullable = true;
				colvarUpdateTime.IsPrimaryKey = false;
				colvarUpdateTime.IsForeignKey = false;
				colvarUpdateTime.IsReadOnly = false;
				colvarUpdateTime.DefaultSetting = @"";
				colvarUpdateTime.ForeignKeyTableName = "";
				schema.Columns.Add(colvarUpdateTime);
				
				BaseSchema = schema;
				//add this schema to the provider
				//so we can query it later
				DataService.Providers["ZJDBProvider"].AddSchema("t_zjcompanyseed",schema);
			}
		}
		#endregion
		
		#region Props
		  
		[XmlAttribute("Id")]
		[Bindable(true)]
		public int Id 
		{
			get { return GetColumnValue<int>(Columns.Id); }
			set { SetColumnValue(Columns.Id, value); }
		}
		  
		[XmlAttribute("CompanyName")]
		[Bindable(true)]
		public string CompanyName 
		{
			get { return GetColumnValue<string>(Columns.CompanyName); }
			set { SetColumnValue(Columns.CompanyName, value); }
		}
		  
		[XmlAttribute("CompanyNo")]
		[Bindable(true)]
		public string CompanyNo 
		{
			get { return GetColumnValue<string>(Columns.CompanyNo); }
			set { SetColumnValue(Columns.CompanyNo, value); }
		}
		  
		[XmlAttribute("Province")]
		[Bindable(true)]
		public string Province 
		{
			get { return GetColumnValue<string>(Columns.Province); }
			set { SetColumnValue(Columns.Province, value); }
		}
		  
		[XmlAttribute("City")]
		[Bindable(true)]
		public string City 
		{
			get { return GetColumnValue<string>(Columns.City); }
			set { SetColumnValue(Columns.City, value); }
		}
		  
		[XmlAttribute("Corporate")]
		[Bindable(true)]
		public string Corporate 
		{
			get { return GetColumnValue<string>(Columns.Corporate); }
			set { SetColumnValue(Columns.Corporate, value); }
		}
		  
		[XmlAttribute("RegCapital")]
		[Bindable(true)]
		public string RegCapital 
		{
			get { return GetColumnValue<string>(Columns.RegCapital); }
			set { SetColumnValue(Columns.RegCapital, value); }
		}
		  
		[XmlAttribute("RegDate")]
		[Bindable(true)]
		public DateTime? RegDate 
		{
			get { return GetColumnValue<DateTime?>(Columns.RegDate); }
			set { SetColumnValue(Columns.RegDate, value); }
		}
		  
		[XmlAttribute("BusinessScope")]
		[Bindable(true)]
		public string BusinessScope 
		{
			get { return GetColumnValue<string>(Columns.BusinessScope); }
			set { SetColumnValue(Columns.BusinessScope, value); }
		}
		  
		[XmlAttribute("Phone")]
		[Bindable(true)]
		public string Phone 
		{
			get { return GetColumnValue<string>(Columns.Phone); }
			set { SetColumnValue(Columns.Phone, value); }
		}
		  
		[XmlAttribute("Address")]
		[Bindable(true)]
		public string Address 
		{
			get { return GetColumnValue<string>(Columns.Address); }
			set { SetColumnValue(Columns.Address, value); }
		}
		  
		[XmlAttribute("Email")]
		[Bindable(true)]
		public string Email 
		{
			get { return GetColumnValue<string>(Columns.Email); }
			set { SetColumnValue(Columns.Email, value); }
		}
		  
		[XmlAttribute("Website")]
		[Bindable(true)]
		public string Website 
		{
			get { return GetColumnValue<string>(Columns.Website); }
			set { SetColumnValue(Columns.Website, value); }
		}
		  
		[XmlAttribute("UpdateTime")]
		[Bindable(true)]
		public DateTime? UpdateTime 
		{
			get { return GetColumnValue<DateTime?>(Columns.UpdateTime); }
			set { SetColumnValue(Columns.UpdateTime, value); }
		}
		
		#endregion
		
		
			
		
		//no foreign key tables defined (0)
		
		
		
		//no ManyToMany tables defined (0)
		
        
        
		#region ObjectDataSource support
		
		
		/// <summary>
		/// Inserts a record, can be used with the Object Data Source
		/// </summary>
		public static void Insert(string varCompanyName,string varCompanyNo,string varProvince,string varCity,string varCorporate,string varRegCapital,DateTime? varRegDate,string varBusinessScope,string varPhone,string varAddress,string varEmail,string varWebsite,DateTime? varUpdateTime)
		{
			TZjcompanyseed item = new TZjcompanyseed();
			
			item.CompanyName = varCompanyName;
			
			item.CompanyNo = varCompanyNo;
			
			item.Province = varProvince;
			
			item.City = varCity;
			
			item.Corporate = varCorporate;
			
			item.RegCapital = varRegCapital;
			
			item.RegDate = varRegDate;
			
			item.BusinessScope = varBusinessScope;
			
			item.Phone = varPhone;
			
			item.Address = varAddress;
			
			item.Email = varEmail;
			
			item.Website = varWebsite;
			
			item.UpdateTime = varUpdateTime;
			
		
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		
		/// <summary>
		/// Updates a record, can be used with the Object Data Source
		/// </summary>
		public static void Update(int varId,string varCompanyName,string varCompanyNo,string varProvince,string varCity,string varCorporate,string varRegCapital,DateTime? varRegDate,string varBusinessScope,string varPhone,string varAddress,string varEmail,string varWebsite,DateTime? varUpdateTime)
		{
			TZjcompanyseed item = new TZjcompanyseed();
			
				item.Id = varId;
			
				item.CompanyName = varCompanyName;
			
				item.CompanyNo = varCompanyNo;
			
				item.Province = varProvince;
			
				item.City = varCity;
			
				item.Corporate = varCorporate;
			
				item.RegCapital = varRegCapital;
			
				item.RegDate = varRegDate;
			
				item.BusinessScope = varBusinessScope;
			
				item.Phone = varPhone;
			
				item.Address = varAddress;
			
				item.Email = varEmail;
			
				item.Website = varWebsite;
			
				item.UpdateTime = varUpdateTime;
			
			item.IsNew = false;
			if (System.Web.HttpContext.Current != null)
				item.Save(System.Web.HttpContext.Current.User.Identity.Name);
			else
				item.Save(System.Threading.Thread.CurrentPrincipal.Identity.Name);
		}
		#endregion
        
        
        
        #region Typed Columns
        
        
        public static TableSchema.TableColumn IdColumn
        {
            get { return Schema.Columns[0]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyNameColumn
        {
            get { return Schema.Columns[1]; }
        }
        
        
        
        public static TableSchema.TableColumn CompanyNoColumn
        {
            get { return Schema.Columns[2]; }
        }
        
        
        
        public static TableSchema.TableColumn ProvinceColumn
        {
            get { return Schema.Columns[3]; }
        }
        
        
        
        public static TableSchema.TableColumn CityColumn
        {
            get { return Schema.Columns[4]; }
        }
        
        
        
        public static TableSchema.TableColumn CorporateColumn
        {
            get { return Schema.Columns[5]; }
        }
        
        
        
        public static TableSchema.TableColumn RegCapitalColumn
        {
            get { return Schema.Columns[6]; }
        }
        
        
        
        public static TableSchema.TableColumn RegDateColumn
        {
            get { return Schema.Columns[7]; }
        }
        
        
        
        public static TableSchema.TableColumn BusinessScopeColumn
        {
            get { return Schema.Columns[8]; }
        }
        
        
        
        public static TableSchema.TableColumn PhoneColumn
        {
            get { return Schema.Columns[9]; }
        }
        
        
        
        public static TableSchema.TableColumn AddressColumn
        {
            get { return Schema.Columns[10]; }
        }
        
        
        
        public static TableSchema.TableColumn EmailColumn
        {
            get { return Schema.Columns[11]; }
        }
        
        
        
        public static TableSchema.TableColumn WebsiteColumn
        {
            get { return Schema.Columns[12]; }
        }
        
        
        
        public static TableSchema.TableColumn UpdateTimeColumn
        {
            get { return Schema.Columns[13]; }
        }
        
        
        
        #endregion
		#region Columns Struct
		public struct Columns
		{
			 public static string Id = @"id";
			 public static string CompanyName = @"companyName";
			 public static string CompanyNo = @"companyNo";
			 public static string Province = @"province";
			 public static string City = @"city";
			 public static string Corporate = @"corporate";
			 public static string RegCapital = @"regCapital";
			 public static string RegDate = @"regDate";
			 public static string BusinessScope = @"businessScope";
			 public static string Phone = @"phone";
			 public static string Address = @"address";
			 public static string Email = @"email";
			 public static string Website = @"website";
			 public static string UpdateTime = @"updateTime";
						
		}
		#endregion
		
		#region Update PK Collections
		
        #endregion
    
        #region Deep Save
		
        #endregion
	}
}
